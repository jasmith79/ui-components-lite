import Text from'./text.min.js';import{ListBehavior}from'./list.min.js';import Focusable from'../utils/focusable.min.js';import{UIBase,defineUIComponent,document,global}from'../utils/ui-component-base.min.js';import{mix}from'../../../mixwith/src/mixwith.js';import{extractType}from'../../../extracttype/extracttype.js';const reflectedAttributes=['selected-index','is-open','multiple','label'],template=document.createElement('template');template.innerHTML=`
  <style>
    ui-list {
      transition: transform 500ms cubic-bezier(0.165, 0.84, 0.44, 1);
      background: #fff;
      position: relative;
      left: -5px;
      z-index: 1000;
      width: 100%;
      max-height: 225px;
      overflow-y: scroll;
    }

    .arrow {
      border: solid #999;
      border-width: 0 2px 2px 0;
      display: inline-block;
      padding: 3px;
      float: right;
      position: relative;
      top: 6px;
      right: 2px;
      transform: rotate(45deg);
    }

    .not-overflowing {
      overflow: hidden !important;
    }

    #dummy-item {
      text-align: center;
      padding-bottom: 3px;
    }

    #dummy-item.default {
      letter-spacing: 3px;
    }

    #list-holder {
      height: 1px;
      overflow: visible;
      position: relative;
      top: -10px;
      border-top: 1px solid #999;
    }

    ui-list ::slotted(.ui-item) {
      border: none;
    }

    :host {
      display: block;
      max-width: 200px;
    }

    :host([multiple="true"]) #dummy-item #dummy-item-content {
      position: relative;
      left: 10px;
    }

    :host([is-open="true"]) .arrow {
      transform: rotate(-135deg);
    }

    :host([is-open="true"]) ui-list {
      box-shadow: 3px 5px 10px -4px #999;
      padding-bottom: 1px;
    }
    
    /*ui-list.overflowing-window {
      transform: scale(1) translateY(-265px); 
    }*/

    ui-list.not-overflowing-window {
      transform: scale(1) translateY(0px);
    }

    :host([is-open="false"]) ui-list {
      transform: scale(0) translateY(-200px);
    }

    :host([is-open="true"]) #list-holder {
      border-color: var(--ui-theme-primary-dark-color, blue);
    }

    :host([is-open="false"]) ui-list ::slotted(.ui-item) {
      display: none;
    }

    ui-text {
      /* janky, I know. TODO: find a way to make this work with transform: translate */
      transition-property: top, left, font-size;
      transition-timing-function: ease;
      transition-duration: 1s;
      position: relative;
      top: 5px;
      left: 0px;
      font-size: 14px;
    }

    .text-moved {
      top: 25px;
      left: 10px;
      font-size: 16px;
    }

  </style>
  <label><ui-text view-text="{{label}}"></ui-text></label>
  <ui-item id="dummy-item" class="default">
    <span id="dummy-item-content"></span>
    <div class="arrow down"></div>
  </ui-item>
  <div id="list-holder" class="not-overflowing">
    <ui-list multiple="{{multiple}}">
      <slot></slot>
    </ui-list>
  </div>
`;export default defineUIComponent({name:'ui-drop-down',reflectedAttributes,template,definition:class extends mix(UIBase).with(ListBehavior,Focusable){constructor(){super(),this._list=null,this._listHolder=null,this._dummyItem=null,this._textContent=''}get textContent(){return this._dummyItem&&this._dummyItem.textContent||this._textContent}set textContent(a){const b=a||'';return this._textContent=b,this._dummyItem||(this._dummyItem=this.selectInternalElement('#dummy-item')),this._dummyItem.querySelector('#dummy-item-content').textContent=b,'...'!==b&&b?(this.selectInternalElement('ui-text').classList.remove('text-moved'),this._dummyItem.classList.remove('default')):(this.selectInternalElement('ui-text').classList.add('text-moved'),this._dummyItem.classList.add('default')),this}appendChild(a){return a&&(super.appendChild(a),a.on('click',()=>{this.multiple||global.setTimeout(()=>{this.close()},300)})),a}toggle(){return this.isOpen=!this.isOpen,this}open(){return this.isOpen=!0,this}close(){return this.isOpen=!1,this}init(){let a=!1;super.init();const b=this.attr('tabindex');(null===b||0>b)&&this.attr('tabindex','0'),this.on('enter-key',()=>{this.open()}),this.attr('name')&&(!this.attr('label')&&this.attr('label',this.attr('name')),this.selectInternalElement('label').setAttribute('for',this.attr('name'))),this.attr('label')&&this.selectInternalElement('ui-text').classList.add('text-moved'),this.on('focus',()=>this.selectInternalElement('ui-text').classList.remove('text-moved')),this.on('blur',()=>{global.setTimeout(()=>{this.label&&!this.value&&this.selectInternalElement('ui-text').classList.add('text-moved')},600)}),this._beforeReady(()=>{this._list=this.selectInternalElement('ui-list'),this._listHolder=this.selectInternalElement('#list-holder'),this._dummyItem=this.selectInternalElement('#dummy-item'),this._dummyItem.selectInternalElement('ui-checkbox').style.display='none',this._items.forEach((a)=>{a.isSelected&&(this.selected=a),a.on('click',()=>{this.multiple||global.setTimeout(()=>{this.close()},300)})}),this.name&&!this.selected&&(this.textContent=null),this._listHolder.classList.remove('not-overflowing'),this._dummyItem.on('click',()=>{null===this.attr('tabindex')&&this.attr('tabindex','0'),this.toggle(),a=this.isOpen})}),this.multiple||(this.multiple=!1),this.isOpen||(this.isOpen=!1),this.on('mouseenter',()=>a=!0),this.on('mouseleave',()=>{a=!1,global.setTimeout(()=>{a||(this.isOpen=!1)},1e3)}),this.on('attribute-change',({changed:{now:a,name:b}})=>{switch(b){case'selected-index':this.textContent=this.selected&&!this.multiple?this.selected.textContent:'';break;case'is-open':let c=this.selectInternalElement('ui-list');if(a){let a=global.getComputedStyle(c).height,{top:b}=this.getBoundingClientRect(),d=document.documentElement.clientHeight,e=a.match(/\d+/);e&&(a=+e[0]+35);let f=a>d-b;f?(c.classList.add('overflowing-window'),c.style.transform=`translateY(-${Math.min(a,265)}px)`):(c.classList.add('not-overflowing-window'),c.style.transform=''),this.classList.add('is-opened')}else this.classList.remove('is-opened'),c.classList.remove('overflowing-window'),c.classList.remove('not-overflowing-window');}})}}});