import{Item,ListBehavior}from'./list.min.js';import{UIBase,defineUIComponent,document}from'../utils/ui-component-base.min.js';import extractType from'../../../extracttype/extracttype.js';import{mix}from'../../../mixwith/src/mixwith.js';export const Tab=(()=>{const a=document.createElement('template');return a.innerHTML=`
    <style>
      #content {
        position: relative;
        top: 16px;
      }

      :host {
        display: inline-block;
        background-color: inherit;
        height: 49px;
        width: 120px;
        white-space: nowrap;
        text-overflow: ellipsis;
        text-transform: capitalize;
        border-radius: 5%;
        margin: 5px;
        padding: 0;
        text-align: center;
      }

      :host(:hover) {
        color: var(--ui-theme-light-text-color, #fff);
      }

      :host([is-selected="true"]) {
        box-shadow: 0px 0px 10px -1px var(--ui-theme-light-text-color, #fff);
      }

      :host-context(.tabs-centered) {
        left: -30px;
      }
    </style>
  `,defineUIComponent({name:'ui-tab',template:a,definition:class extends Item{init(){super.init(),this.attr('role','tab');const a=this.attr('tabindex');(null===a||0>a)&&this.attr('tabindex','0')}}})})();export const Tabs=(()=>{const a=document.createElement('template');return a.innerHTML=`
    <style>
      :host {
        display: block;
        height: 55px;
        background-color: var(--ui-theme-primary-dark-color, blue);
        width: 100%;
      }

      :host ::slotted(.ui-tab:hover) {
        text-shadow: 1px 1px 6px #fff;
      }
    </style>
    <slot></slot>
  `,defineUIComponent({name:'ui-tabs',template:a,reflectedAttributes:['for'],definition:class extends mix(UIBase).with(ListBehavior){constructor(){super(),this._for=null}appendChild(a){a.matches&&a.matches('.ui-tab')&&super.appendChild(a)}init(){super.init(),this.attr('role','tabpanel'),this.on('attribute-change',({changed:{now:a,name:b}})=>{switch(b){case'for':if(a){this._for=a;const b=document.querySelector(this._for);if(b){const a=b.on?'on':'addEventListener';b[a]('change',({value:a})=>{const b=this._items.reduce((b,c)=>b?b:c.value===a?c:b,null);this.selected=b&&b!==this.selected?a:null})}}else this._for=null;break;case'selected-index':-1<a&&this._for&&document.querySelector(this._for).route(this.selected.value);}})}}})})();