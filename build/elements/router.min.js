import{UIBase,defineUIComponent,document,global}from'../utils/ui-component-base.min.js';import{parseURL,toQueryString}from'../utils/url.min.js';import extractType from'../../../extracttype/extracttype.js';import{mix}from'../../../mixwith/src/mixwith.js';export const Router=(()=>{let a=null,b=[];const c=document.createElement('template');return c.innerHTML=`<slot name="router-content"></slot>`,defineUIComponent({name:'ui-router',template:c,reflectedAttributes:['updates-history','renders-current','hash-bang'],definition:class extends UIBase{constructor(){super(),this._contentSlot=null,this._routes={},this._currentRoute=null,this._managingHistory=!1,this._login=null,this._popstateListener=({state:a})=>{const{route:c}=parseURL(window.location.href);c===b[b.length-2]&&b.pop(),this._updateRoute(c),b.length&&(1!==b.length||'/'!==b[0])||(global.removeEventListener('popstate',this._popstateListener),this._managingHistory=!1)}}get currentRoute(){return this._currentRoute}set currentRoute(a){return a in this._routes?this.route(a):null}appendChild(a){a.matches&&a.matches('[route-path]')&&(this._routes[a.getAttribute('route-path')]=a,super.appendChild(a))}_internalRoute(a,b){if(!a&&('/'in this._routes&&(a='/'),!a||!this._routes[a]))throw new Error(`Unknown route ${a||'empty'}.`);const c=this._routes[a];if(!c&&'/'!==a)return console.warn(`No element matches path ${a},
            perhaps the ui-route has no path set?`),null;if(c!==this.selected){if(this.selected&&(this.selected.removeAttribute('is-selected'),this.selected.removeAttribute('slot')),this.rendersCurrent&&c.setAttribute('slot','router-content'),this.selected=c,this._currentRoute=a,this.attr('current-route',a),c&&(b&&Object.keys(b).length&&c.update(b),c.setAttribute('is-selected',!0)),'/login'===a){let a=c.querySelector('.ui-login').selectInternalElement('[name="user"]');a&&a.focus()}return global.setTimeout(()=>{global.dispatchEvent(new Event('resize'))},0),c}return null}_updateRoute(a,b){let c=this._internalRoute(a,b);if(c){const b=new Event('change');b.data=c.data,b.value=a,b.targetComponent=c,this.dispatchEvent(b)}return c}_updateHistory(a,c,d={}){global.history.pushState(d,'',c),b.push(a)}route(a,b){let{data:c,path:d}=parseURL(window.location.href);const e=b||c,f=extractType(a);let g=null;'String'===f&&(g=a),f.match(/HTML\w*Element/)&&(g=a.getAttribute('route-path'));const h=d.match(/\/$/)?d:`${d}/`,i=this.hashBang?`${h.replace('#','')}#!${g}`:`${h}${g}`;if(this._login&&!this._login.isLoggedIn)this._internalRoute('/login');else if(g&&g in this._routes){if('/login'===g)return this._updateRoute(g);if(g!==this.currentRoute)return e&&Object.keys(e).length&&this._routes[g].update(e),this.updatesHistory&&this._updateHistory(g,i,e),this._updateRoute(g,e)}return null}init(){super.init(),this._beforeReady(()=>{this._contentSlot=this.selectInternalElement('slot');let a=null,{route:b,data:c}=parseURL(window.location.href);b&&(a=b);let d=!1;this.selectAll('[route-path]').forEach((b,c)=>{const e=b.getAttribute('route-path');this._routes[e]=b,c||a||(a=e),b.matches&&b.matches('[selected]')&&(a=e),'/login'===e&&(d=!0,b.onReady(()=>{let c=b.querySelector('.ui-login');this._login=c,c.on('login',()=>{const{route:a}=parseURL(window.location.href);this._updateRoute(a)}),c.on('logout',()=>{this.route('/login')}),this.route(a)}))}),d||this.onReady(()=>{this.route(a)})}),this.on('attribute-change',({changed:{now:b,name:c,was:d}})=>{switch(c){case'renders-current':this.selected&&(b?this.selected.setAttribute('slot','router-content'):this.selected.removeAttribute('slot'));break;case'updates-history':if(b&&a!==this){if(a)throw new Error(`Only one router per page can manage the navigation history
                     at a time. Please listen for that router's route-changed
                     event to update other elements.`);a=this,this._managingHistory=!0,window.addEventListener('popstate',this._popstateListener)}else a=null,this._managingHistory=!1,window.removeEventListener('popstate',this._popstateListener);}})}}})})();export const Route=(()=>{return defineUIComponent({name:'ui-route',reflectedAttributes:['updates-history','route-path','is-selected','warns-on-unload'],definition:class extends UIBase{constructor(){super(),this._data=null,this._dataElements=[],this._fromChangeHandler=!1,this._unloadListener=()=>{this.data&&localStorage.setItem(this.routePath,JSON.stringify(elem.data))}}get data(){return this._data}update(a){this._data=a;const b=new CustomEvent('data-changed');if(b.data=a,localStorage.setItem(this.routePath,JSON.stringify(this.data)),this._fromChangeHandler||this._dataElements.forEach((b)=>b.data=a),this._fromChangeHandler=!1,this.updatesHistory){const b=toQueryString(a);if('?'!==b){window.location.href.match(/\/$/)?window.location.href.slice(0,window.location.href.length-1):window.location.href;history.replaceState(a,'',window.location.href,window.location.href+b)}}return this.dispatchEvent(b),this}appendChild(a){a.matches&&a.matches('[is-data-element]')&&this._dataElements.push(a),super.appendChild()}init(){super.init(),this.onReady(()=>{this._dataElements=this.shadowRoot?[...this.selectInternalAll('[is-data-element]'),...this.selectAll('[is-data-element]')]:this.selectAll('[is-data-element]'),this._dataElements.forEach((a)=>{a.on('change',()=>{this._fromChangeHandler=!0,this.update(this._dataElements.reduce((a,b)=>{const c=b.serialize();return Object.entries(c).forEach(([b,c])=>{b in a&&console.warn(`Overwriting duplicate data-element property ${b}.`),a[b]=c}),a},{}))})})}),this.on('attribute-change',({changed:{now:a,name:b}})=>{switch(b){case'is-selected':if(a){let a=localStorage.getItem(this.routePath);this.data||null==a||this.update(JSON.parse(a)),this.dispatchEvent(new CustomEvent('component-selected'))}else a||this.dispatchEvent(new CustomEvent('component-deselected'));}})}}})})();