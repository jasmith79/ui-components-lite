import Checkbox from'./checkbox.min.js';import{FormControlBehavior}from'./form.min.js';import Ripples from'../animations/rippler.min.js';import Focusable from'../utils/focusable.min.js';import{UIBase,defineUIComponent,document}from'../utils/ui-component-base.min.js';import extractType from'../../../extracttype/extracttype.js';import{mix}from'../../../mixwith/src/mixwith.js';const handlerCache=new WeakMap;export const ListBehavior=(a)=>defineUIComponent({name:'ui-list-behavior',reflectedAttributes:['multiple','selected-index'],registerElement:!1,definition:class extends mix(a).with(FormControlBehavior){constructor(){super(),this._items=[],this._selected=null}_itemHandlerFactory(a){let b=handlerCache.get(a);if(b)return b;let c=()=>{!0===this.multiple?a.isSelected||this.selected.includes(a)?a.isSelected&&(a.isSelected=!1,this._deSelect(a)):(a.isSelected=!0,this.selected=a):!a.isSelected&&a!==this.selected&&(a.isSelected=!0,this.selected=a)};return handlerCache.set(a,c),c}get items(){return this.selectAll('.ui-item')}get value(){return this.selected&&this.selected.map?this.selected.map((a)=>a?a.value:'').join(','):this.selected&&this.selected.value||null}set value(a){this.selected=a}get selected(){return this._selected}set selected(a){if(null===a)return void(this._selected=null);const b=extractType(a);let c;return'Number'===b?c=this._items[a]:'String'===b?(c=this.querySelector(`[value="${a}"]`),c||(c=this._items.filter((b)=>b.textContent===a)[0])):void 0,b.match(/HTML\w*Element/)&&this._items.includes(a)&&(c=a),c&&(c.attr('aria-selected',!0),c.isSelected=!0,!0===this.multiple?(this._selected.push(c),this.dispatchEvent(new Event('change'))):(this._selected=c,this.selectedIndex=this._items.indexOf(c),this._items.forEach((a)=>{a!==c&&(a.isSelected=!1),a.attr('aria-selected',!1)}))),c}_deSelect(a){return!0===this.multiple&&(this._selected=this._selected.filter((b)=>b!==a),this.dispatchEvent(new Event('change'))),this}appendChild(a){let b=a.onReady((a)=>{a.matches&&a.matches('.ui-item')&&(a.on('click',this._itemHandlerFactory(a)),super.appendChild(a),this._items.push(a),a.isSelected&&(this.selected=a))});return this._pendingDOM&&this._pendingDOM.push(b),a}init(){super.init(),this.on('keydown',(a)=>{let b=(()=>{switch(a.keyCode){case 40:return this._items[(this._items.indexOf(this.shadowRoot.activeElement)+1)%this._items.length];case 38:return this._items[+(this._items.indexOf(this.shadowRoot.activeElement)-1)];default:return null;}})();b&&b.focus()}),this.on('attribute-change',({changed:{now:a,name:b}})=>{switch(b){case'multiple':!0===a?(this.selectedIndex=-1,this._selected=this._selected?[this._selected]:[],this.attr('aria-multiselectable',!0)):(this.attr('aria-multiselectable',!1),this.selected=null==this.selected?null:this.selected[0]);break;case'selected-index':if(-1===a||this.multiple)return;if(!this._items[a])return console.warn(`Attempted to set invalid index ${a} for element.`),void this.attr('selected-index',was);this._items[a]!==this.selected&&(this.selected=a);}}),this._beforeReady(()=>{this.selectAll('.ui-item').map((a)=>{this._items.push(a),a.attr('is-selected')&&(this.selected=a),a.on('click enter-key',this._itemHandlerFactory(a))})})}}});export const Item=(()=>{const a=document.createElement('template');return a.innerHTML=`
    <style>
      :host {
        --ui-theme-ripple-color: var(--ui-theme-primary-dark-color, rgb(0, 139, 163));
        display: block;
        margin-top: 10px;
        margin-bottom: 10px;
        min-height: 20px;
        background-color: inherit;
        color: inherit;
        border-radius: 0;
        text-transform: capitalize;
        width: 90%;
        margin-left: 5%;
        padding-top: 4px;
      }

      :host(:hover) {
        color: var(--ui-theme-primary-dark-color, #999);
      }

      :host(.selected) {
        border-bottom: 1px solid var(--ui-theme-primary-dark-color, rgb(0, 139, 163));
      }

      .ui-checkbox {
        display: none;
        height: 18px;
        width: 18px;
        float: left;
      }

      .ui-checkbox::before {
        top: 2px;
        height: 9px;
        left: 5px;
      }

      :host-context([multiple="true"]) {
        border-bottom: none;
      }

      :host-context([multiple="true"]) ui-checkbox {
        display: inline-block;
      }

      :host-context([multiple="true"]) #content {
        position: relative;
        left: -10px; /* offsets checkbox */
      }
    </style>
    <ui-checkbox></ui-checkbox>
    <span id="content"><slot></slot></span>
  `,defineUIComponent({name:'ui-item',template:a,reflectedAttributes:['is-selected','value'],definition:class extends mix(UIBase).with(Focusable){constructor(){super(),this._checkbox=null,this._content=null}init(){super.init(),this.attr('role','listoption'),this._beforeReady(()=>{this._checkbox=this.selectInternalElement('ui-checkbox'),this._content=this.selectInternalElement('#content'),this.value&&'true'!==this.value.toString()||(this.value=this.textContent),this.isSelected||(this.isSelected=!1)}),this.on('attribute-change',({changed:{now:a,name:b}})=>{'is-selected'===b?this.onReady(()=>{a?(this.classList.add('selected'),this._checkbox.checked=!0,this.dispatchEvent(new CustomEvent('component-selected'))):(this.classList.remove('selected'),this._checkbox.checked=!1,this.dispatchEvent(new CustomEvent('component-deselected')))}):void 0})}}})})();export const List=(()=>{const a=document.createElement('template');return a.innerHTML=`
    <style>
      :host {
        display: block;
        text-align: center;
        margin: 5px;
      }
    </style>
    <slot></slot>
  `,defineUIComponent({name:'ui-list',template:a,definition:class extends mix(UIBase).with(ListBehavior){init(){super.init(),this.attr('role','list')}}})})();