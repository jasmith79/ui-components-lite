import'./styler.min.js';import DataBinder from'./binder.min.js';import DOMutils from'./dom-utils.min.js';import processHTMLAttr from'./attribute-analyzer.min.js';import event2Promise from'./promise-from-event.min.js';import{baseClass,global,document,defineUIComponent}from'./dom.min.js';import{toSnakeCase,toCamelCase}from'../../../jsstring/src/jsstring.js';import{mix}from'../../../mixwith/src/mixwith.js';let flag=!0;class UIBase extends mix(baseClass).with(DOMutils,DataBinder){constructor(){super(),this._listeners=[],this._beforeReadyHandlers=[],this._pendingDOM=[],this._isReady=event2Promise({element:this,eventName:'ui-component-ready',callback:()=>this});let a=this._stamp();a&&(!this.shadowRoot&&this.attachShadow({mode:'open'}),this.shadowRoot.appendChild(global.document.importNode(a.content,!0)));let b=this.constructor.observedAttributes;b.length&&this.on('attribute-change',({changed:{name:a,now:c}})=>{b.includes(a)&&(this[toCamelCase(a)]=c)}),Promise.resolve(!0).then(()=>this.init())}static get observedAttributes(){return['style','class']}get componentName(){return this.tagName.toLowerCase()}get isUIComponent(){return!0}get _childrenUpgraded(){return Promise.all([...this.children].map((a)=>Promise.resolve(a._isReady||a)))}_beforeReady(...a){this._beforeReadyHandlers.push.apply(this._beforeReadyHandlers,a)}onReady(...a){let b=this._isReady.then(()=>Promise.all(a.map((a)=>a(this))));return global._usingShady&&global.ShadyCSS.styleSubtree(this),b}init(){this.classList.add('is-ui-component');const a=(a)=>a._isReady||Promise.resolve(a),b=[...[...this.children].map(a)];this.shadowRoot&&b.push.apply(b,[...this.shadowRoot.children].map(a)),[...this.attributes].forEach(({name:a,value:b})=>{const c=b&&b.match(/^\{\{\{(.+)\}\}\}$/),d=b&&b.match(/^\{\{(.+)\}\}$/),e=c?c[1]:d?d[1]:null,f=e?toSnakeCase(e,'-'):null;f&&this.bindAttribute(a,f,c)}),Promise.all(b).then(()=>{let a=this.constructor.observedAttributes;return a.forEach((a)=>{if(this.attr(a)){const b=new CustomEvent('attribute-change');b.changed={name:a,now:this.attr(a),was:null},this.dispatchEvent(b)}}),this._beforeReadyHandlers.length?Promise.all(this._beforeReadyHandlers.map((a)=>a(this))):null}).then(()=>Promise.all(this._pendingDOM)).then(()=>{this.dispatchEvent(new CustomEvent('ui-component-ready',{bubbles:!1})),this._pendingDOM=null}).catch((a)=>{throw a})}connectedCallback(){this._listeners.forEach(([a,b])=>this.addEventListener(a,b)),this._mutationObservers.forEach(([a,b,c])=>a.observe(b,c))}disconnectedCallback(){this._shadowElement=null,this._listeners.forEach(([a,b])=>this.removeEventListener(a,b)),this._mutationObservers.forEach(([a])=>a.disconnect())}attributeChangedCallback(a,b,c){if(b!==c)if(a in this._oneWayBoundAttrs&&!this._internalMutationFlag)console.warn(`Attempted to manually set data-bound attribute ${a} of ${this.componentName}.`),this._internalMutationFlag=!0,this.attr(a,b),this._internalMutationFlag=!1;else{this._internalMutationFlag=!1;const d=new CustomEvent('attribute-change');d.changed={name:a,was:b,now:processHTMLAttr(c),raw:c},this.dispatchEvent(d)}}}export default UIBase;export{global,document,UIBase,defineUIComponent};